#!/bin/bash

usage() {
    cat >&2 <<EOF
# Usage: $0 xmin xmax ymin ymax n_cols n_rows nodata_value \\
#        locations_tsv_file values_tsv_file output_dir
#
# Generate rasters of climate variables from point data in text files.
#
# Expects two files as input, both in tab-separated-values format.
# - locations. Must have column headings Lat and Long. Other columns
#   are ignored.
# - values. Corresponding climate values, with one column for each
#   year of interest. Column headings are used to name output
#   directories.
# Both files must have the same number of rows.
#
# The output consists of one raster for each climate value column.
#
# The rasters are generated as 32-bit floating point GeoTIF and put in
# separate directories named with their corresponding column names
# from the values TSV file.
EOF
    exit 1
}

die() {
    echo "$1" >&2
    exit 1
}

[ $# = 10 ] || usage

xmin=$1
xmax=$2
ymin=$3
ymax=$4
ncols=$5
nrows=$6
nodata_value=$7
locations_tsv=$8
values_tsv=$9
out=${10} # parent of output dirs.

which gdal_rasterize >/dev/null 2>/dev/null || \
    module load gdal # For systems using http://modules.sourceforge.net/
which gdal_rasterize >/dev/null || \
    die "Couldn't find gdal_rasterize. Please install the gdal package."

wd=$PWD

mkdir -p "$out"
cd "$out" || die "Can't access directory $out"

tmp_dir=$(mktemp -d tsv-rasterize.XXXXXXXXXX)
cleanup() {
    [ -d "$tmp_dir" ] && rm -r "$tmp_dir"
}
trap cleanup EXIT

# create CSV file from TSV locations and corresponding values
(cd "$wd" && \
        cut -f 1-2  "$locations_tsv"  | \
            paste - "$values_tsv"
) | sed -e 's/,/_/g' \
        -e '1s/"//g' \
        -e '1s/[ /]/_/g' \
        -e 's/\t/,/g' \
        -e 's/[[:cntrl:]]//g' \
        > "$tmp_dir/data.csv"

[ -s "$tmp_dir/data.csv" ] || die "Failed to create $tmp_dir/data.csv"

read line1 < "$tmp_dir/data.csv"
[[ "$line1" =~ Long, && "$line1" =~ Lat, ]] || \
    die "Expected column headings Long and Lat on line 1"
columns=${line1//,/ }

cat > "$tmp_dir/data.vrt" <<EOF
<OGRVRTDataSource>
    <OGRVRTLayer name="data">
        <SrcDataSource relativeToVRT="1">data.csv</SrcDataSource>
        <GeometryType>wkbPoint</GeometryType>
        <LayerSRS>WGS84</LayerSRS>
        <GeometryField encoding="PointFromColumns" x="Long" y="Lat"/>
    </OGRVRTLayer>
</OGRVRTDataSource>
EOF

# Generate output rasters as GeoTIF
outname=$(basename "${values_tsv%.tsv}").tif

for col in $columns; do
    [ "$col" = Long -o "$col" = Lat ] && \
        continue
    mkdir -p "$col" || die "Couldn't create output directory $col in $PWD"
    outfile="$col/$outname"
    [ -s "$outfile" ] && die "$outfile already exists in $PWD"

    echo -n "$col..." >&2
    gdal_rasterize -q \
        -a "$col" \
        -te "$xmin" "$ymin" "$xmax" "$ymax" \
        -ts "$ncols" "$nrows" \
        -a_nodata "$nodata_value" \
        -ot Float32 \
        "$tmp_dir/data.vrt" "$col/$outname" || \
        die "gdal_rasterize ... $tmp_dir/data.vrt $col/$outname failed"
done
echo >&2
